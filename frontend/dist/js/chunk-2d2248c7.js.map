{"version":3,"sources":["webpack:///./src/views/Country.vue?becc","webpack:///src/views/Country.vue","webpack:///./src/views/Country.vue?46d1","webpack:///./src/views/Country.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","label","disabled","model","value","callback","$$v","countryId","expression","placeholder","countryName","countryRegion","countryCode","countryLanguage","countryFlag","color","on","click","create_country","_v","update_country","append-icon","single-line","hide-details","search","headers","items","countries","scopedSlots","_u","key","fn","count","_s","item","$event","getbyID","delete_country","icon","proxy","staticRenderFns","CountryQuery","src_default","_templateObject","CountryCreate","_templateObject2","CountryUpdate","_templateObject3","CountryDelete","_templateObject4","Countryvue_type_script_lang_js_","data","text","apollo","methods","_create_country","Object","asyncToGenerator","regeneratorRuntime","mark","_callee","_countryName$countryR","wrap","_context","prev","next","$apollo","mutate","mutation","variables","update","store","_ref","createCountry","readQuery","query","push","country","writeQuery","optimisticResponse","__typename","countryStatus","countryCreation","ok","sent","stop","apply","arguments","_update_country","_callee2","_countryId$countryNam","_context2","parseInt","_ref2","updateCountry","_delete_country","_callee3","result","_context3","confirm","_ref3","deleteCountry","_x","views_Countryvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/chunk-2d2248c7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"country\"},[_c('div',[_c('v-text-field',{attrs:{\"label\":\"Country ID :\",\"disabled\":\"\"},model:{value:(_vm.countryId),callback:function ($$v) {_vm.countryId=$$v},expression:\"countryId\"}}),_c('v-text-field',{attrs:{\"label\":\"Country Name :\",\"placeholder\":\"Country Name\"},model:{value:(_vm.countryName),callback:function ($$v) {_vm.countryName=$$v},expression:\"countryName\"}}),_c('v-text-field',{attrs:{\"label\":\"Country Region :\",\"placeholder\":\"Country Region\"},model:{value:(_vm.countryRegion),callback:function ($$v) {_vm.countryRegion=$$v},expression:\"countryRegion\"}}),_c('v-text-field',{attrs:{\"label\":\"Country Code :\",\"placeholder\":\"Country Code\"},model:{value:(_vm.countryCode),callback:function ($$v) {_vm.countryCode=$$v},expression:\"countryCode\"}}),_c('v-text-field',{attrs:{\"label\":\"Country Language :\",\"placeholder\":\"Country Language\"},model:{value:(_vm.countryLanguage),callback:function ($$v) {_vm.countryLanguage=$$v},expression:\"countryLanguage\"}}),_c('v-text-field',{attrs:{\"label\":\"Country Flag\",\"placeholder\":\"Country Flag\"},model:{value:(_vm.countryFlag),callback:function ($$v) {_vm.countryFlag=$$v},expression:\"countryFlag\"}}),_c('v-btn',{attrs:{\"color\":\"primary\"},on:{\"click\":_vm.create_country}},[_vm._v(\"Add\")]),_c('v-btn',{attrs:{\"color\":\"warning\"},on:{\"click\":_vm.update_country}},[_vm._v(\"Edit\")])],1),_c('v-card',[_c('v-card-title',[_vm._v(\"\\n      Data\\n      \"),_c('v-spacer'),_c('v-text-field',{attrs:{\"append-icon\":\"search\",\"label\":\"Search\",\"single-line\":\"\",\"hide-details\":\"\"},model:{value:(_vm.search),callback:function ($$v) {_vm.search=$$v},expression:\"search\"}})],1),_c('v-data-table',{attrs:{\"headers\":_vm.headers,\"items\":_vm.countries,\"search\":_vm.search},scopedSlots:_vm._u([{key:\"items\",fn:function(count){return [_c('td',[_vm._v(_vm._s(count.item.countryId))]),_c('td',[_vm._v(_vm._s(count.item.countryName))]),_c('td',[_vm._v(_vm._s(count.item.countryRegion))]),_c('td',[_vm._v(_vm._s(count.item.countryCode))]),_c('td',[_vm._v(_vm._s(count.item.countryFlag))]),_c('td',[_vm._v(_vm._s(count.item.countryLanguage))]),_c('td',[_c('v-btn',{attrs:{\"color\":\"warning\"},on:{\"click\":function($event){return _vm.getbyID(count)}}},[_vm._v(\"EDIT\")])],1),_c('td',[_c('v-btn',{attrs:{\"color\":\"error\"},on:{\"click\":function($event){return _vm.delete_country(count.item.countryId)}}},[_vm._v(\"DELETE\")])],1)]}},{key:\"no-data\",fn:function(){return [_c('v-alert',{attrs:{\"value\":true,\"color\":\"warning\",\"icon\":\"warning\"}},[_vm._v(\"Sorry, no data, nothing to display here\")])]},proxy:true}])})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"country\">\r\n    <div>\r\n        <v-text-field label=\"Country ID :\" disabled v-model=\"countryId\"></v-text-field>\r\n        <v-text-field label=\"Country Name :\" placeholder=\"Country Name\" v-model=\"countryName\"></v-text-field>\r\n        <v-text-field label=\"Country Region :\" placeholder=\"Country Region\" v-model=\"countryRegion\"></v-text-field>\r\n        <v-text-field label=\"Country Code :\" placeholder=\"Country Code\" v-model=\"countryCode\"></v-text-field>\r\n        <v-text-field\r\n          label=\"Country Language :\"\r\n          placeholder=\"Country Language\"\r\n          v-model=\"countryLanguage\"\r\n        ></v-text-field>\r\n        <v-text-field label=\"Country Flag\" placeholder=\"Country Flag\" v-model=\"countryFlag\"></v-text-field>\r\n      <v-btn color=\"primary\" @click=\"create_country\">Add</v-btn>\r\n      <v-btn color=\"warning\" @click=\"update_country\">Edit</v-btn>\r\n    </div>\r\n    <!-- <div v-for=\"i in country\" :key=\"i.countryId\">\r\n      <ul>\r\n        <li>\r\n          <input type=\"checkbox\" @input=\"update_task(i)\">\r\n          <strong>{{ i.countryName }}</strong>\r\n        </li>\r\n      </ul>\r\n    </div>-->\r\n    <v-card>\r\n      <v-card-title>\r\n        Data\r\n        <v-spacer></v-spacer>\r\n        <v-text-field v-model=\"search\" append-icon=\"search\" label=\"Search\" single-line hide-details></v-text-field>\r\n      </v-card-title>\r\n\r\n      <v-data-table\r\n      :headers=\"headers\"\r\n      :items=\"countries\"\r\n      :search=\"search\">\r\n        <template v-slot:items=\"count\">\r\n          <td>{{ count.item.countryId}}</td>\r\n          <td>{{ count.item.countryName}}</td>\r\n          <td>{{ count.item.countryRegion}}</td>\r\n          <td>{{ count.item.countryCode}}</td>\r\n          <td>{{ count.item.countryFlag}}</td>\r\n          <td>{{ count.item.countryLanguage}}</td>\r\n          <td>\r\n            <v-btn color=\"warning\" @click=\"getbyID(count)\">EDIT</v-btn>\r\n          </td>\r\n          <td>\r\n            <v-btn color=\"error\" @click=\"delete_country(count.item.countryId)\">DELETE</v-btn>\r\n          </td>\r\n        </template>\r\n        <template v-slot:no-data>\r\n          <v-alert\r\n            :value=\"true\"\r\n            color=\"warning\"\r\n            icon=\"warning\"\r\n          >Sorry, no data, nothing to display here</v-alert>\r\n        </template>\r\n      </v-data-table>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// @ is an alias to /src\r\nimport gql from 'graphql-tag';\r\nimport { constants, truncate } from 'fs';\r\n\r\nconst CountryQuery = gql`\r\n  query {\r\n    countries {\r\n      countryId\r\n      countryName\r\n      countryCode\r\n      countryFlag\r\n      countryRegion\r\n      countryStatus\r\n      countryLanguage\r\n      countryCreation\r\n    }\r\n  }\r\n`;\r\n\r\nconst CountryCreate = gql`\r\n  mutation createCountry(\r\n    $countryName: String\r\n    $countryRegion: String\r\n    $countryCode: String\r\n    $countryFlag: String\r\n    $countryLanguage: String\r\n  ) {\r\n    createCountry(\r\n      countryName: $countryName\r\n      countryRegion: $countryRegion\r\n      countryCode: $countryCode\r\n      countryFlag: $countryFlag\r\n      countryLanguage: $countryLanguage\r\n    ) {\r\n      country {\r\n        countryId\r\n        countryName\r\n        countryRegion\r\n        countryCode\r\n        countryFlag\r\n        countryLanguage\r\n        countryStatus\r\n        countryCreation\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CountryUpdate = gql`\r\n  mutation updateCountry(\r\n    $countryId: Int\r\n    $countryName: String\r\n    $countryRegion: String\r\n    $countryCode: String\r\n    $countryFlag: String\r\n    $countryLanguage: String\r\n  ) {\r\n    updateCountry(\r\n      countryId: $countryId\r\n      countryName: $countryName\r\n      countryRegion: $countryRegion\r\n      countryCode: $countryCode\r\n      countryFlag: $countryFlag\r\n      countryLanguage: $countryLanguage\r\n    ) {\r\n      country {\r\n        countryId\r\n        countryName\r\n        countryRegion\r\n        countryCode\r\n        countryFlag\r\n        countryLanguage\r\n        countryStatus\r\n        countryCreation\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst CountryDelete = gql`\r\n  mutation deleteCountry($countryId: Int) {\r\n    deleteCountry(countryId: $countryId) {\r\n      country {\r\n        countryName\r\n        countryCode\r\n        countryFlag\r\n        countryRegion\r\n        countryLanguage\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      countries: [''],\r\n      countryId: '',\r\n      countryName: '',\r\n      countryRegion: '',\r\n      countryCode: '',\r\n      countryFlag: '',\r\n      countryLanguage: '',\r\n      search: '',\r\n      headers: [\r\n        { text: 'country ID', value: 'countryId' },\r\n        { text: 'Name', value: 'countryName' },\r\n        { text: 'Region', value: 'countryRegion' },\r\n        { text: 'Code', value: 'countryCode' },\r\n        { text: 'Flag', value: 'countryFlag' },\r\n        { text: 'Language', value: 'countryLanguage' },\r\n      ],\r\n    };\r\n  },\r\n  apollo: {\r\n    countries: CountryQuery,\r\n  },\r\n  methods: {\r\n    async create_country() {\r\n      const {\r\n        countryName,\r\n        countryRegion,\r\n        countryCode,\r\n        countryFlag,\r\n        countryLanguage,\r\n      } = {\r\n        countryName: this.countryName,\r\n        countryRegion: this.countryRegion,\r\n        countryCode: this.countryCode,\r\n        countryFlag: this.countryFlag,\r\n        countryLanguage: this.countryLanguage,\r\n      };\r\n      // call the graphql mutation\r\n      const data = await this.$apollo.mutate({\r\n        // query\r\n        mutation: CountryCreate,\r\n        // parameters\r\n        variables: {\r\n          countryName,\r\n          countryRegion,\r\n          countryCode,\r\n          countryFlag,\r\n          countryLanguage,\r\n        },\r\n        update: (store, { data: { createCountry } }) => {\r\n          // add to all tasks list\r\n          const data = store.readQuery({ query: CountryQuery });\r\n          data.countries.push(createCountry.country);\r\n          store.writeQuery({ query: CountryQuery, data });\r\n        },\r\n        optimisticResponse: {\r\n          __typename: 'Mutation',\r\n          createCountry: {\r\n            __typename: 'createCountry',\r\n            country: {\r\n              __typename: 'CountryType',\r\n              countryId: 8,\r\n              countryName: 'Korea',\r\n              countryRegion: 'Southeast Asia',\r\n              countryCode: 'KOR',\r\n              countryFlag: 'Korea Flag',\r\n              countryLanguage: '',\r\n              countryStatus: true,\r\n              countryCreation: '2019-08-01',\r\n            },\r\n            ok: false,\r\n          },\r\n        },\r\n      });\r\n      const t = data.data.createCountry.country;\r\n      // console.log('Added:', t);\r\n      this.countryName = '';\r\n      this.countryRegion = '';\r\n      this.countryCode = '';\r\n      this.countryFlag = '';\r\n      this.countryLanguage = '';\r\n      this.countryStatus = false;\r\n      this.countryCreation = '';\r\n    },\r\n    getbyID(country) {\r\n      {\r\n        (this.countryId = country.item.countryId),\r\n        (this.countryName = country.item.countryName),\r\n        (this.countryRegion = country.item.countryRegion),\r\n        (this.countryCode = country.item.countryCode),\r\n        (this.countryFlag = country.item.countryFlag),\r\n        (this.countryLanguage = country.item.countryLanguage);\r\n      }\r\n    },\r\n    async update_country() {\r\n      const {\r\n        countryId,\r\n        countryName,\r\n        countryRegion,\r\n        countryCode,\r\n        countryFlag,\r\n        countryLanguage,\r\n      } = {\r\n        countryId: parseInt(this.countryId),\r\n        countryName: this.countryName,\r\n        countryRegion: this.countryRegion,\r\n        countryCode: this.countryCode,\r\n        countryFlag: this.countryFlag,\r\n        countryLanguage: this.countryLanguage,\r\n      };\r\n      await this.$apollo.mutate({\r\n        mutation: CountryUpdate,\r\n        variables: {\r\n          countryId,\r\n          countryName,\r\n          countryRegion,\r\n          countryCode,\r\n          countryFlag,\r\n          countryLanguage,\r\n        },\r\n        update: (store, { data: { updateCountry } }) => {\r\n          // add to all tasks list\r\n          const data = store.readQuery({ query: CountryQuery });\r\n          data.country.push(updateCountry.country);\r\n          store.writeQuery({ query: CountryQuery, data });\r\n        },\r\n      });\r\n      const t = data.data.updateCountry.country;\r\n      // console.log('Added:', t);\r\n      this.countryName = '';\r\n      this.countryRegion = '';\r\n      this.countryCode = '';\r\n      this.countryFlag = '';\r\n      this.countryLanguage = '';\r\n      this.countryStatus = false;\r\n      this.countryCreation = '';\r\n    },\r\n    async delete_country(country) {\r\n      const result = confirm('Are you sure you want to delete this ?');\r\n      if (result == true) {\r\n        await this.$apollo.mutate({\r\n          mutation: CountryDelete,\r\n          variables: {\r\n            countryId: country,\r\n          },\r\n          update: (store, { data: { deleteCountry } }) => {\r\n            // add to all tasks list\r\n            const data = store.readQuery({ query: CountryQuery });\r\n            store.writeQuery({ query: CountryQuery, data });\r\n          },\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Country.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Country.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Country.vue?vue&type=template&id=51d2f0be&\"\nimport script from \"./Country.vue?vue&type=script&lang=js&\"\nexport * from \"./Country.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}